package com.MITProjectService.framework.redis;import com.MITProjectService.admin.domain.system.RefreshToken;import com.MITProjectService.exceptionhandling.RedisServerNotRunningException;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.data.redis.RedisConnectionFailureException;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.stereotype.Component;import org.springframework.stereotype.Service;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;@Servicepublic class RedisCashService {    @Autowired    private StringRedisTemplate stringRedisTemplate;    private final ObjectMapper objectMapper = new ObjectMapper().registerModule(new JavaTimeModule()); // ObjectMapper for JSON serialization/deserialization    public boolean saveValInMin(final String key, final String value, final long time) {        try {            stringRedisTemplate.opsForValue().set(key, value, time, TimeUnit.MINUTES);            return true;        } catch (RedisConnectionFailureException e) {            throw new RedisServerNotRunningException("Redis server is not running", e);        } catch (Exception e) {            return false;        }    }    public RefreshToken getRefreshToken(String refreshTokenKey) throws JsonProcessingException {        try {            String serializedRefreshToken = stringRedisTemplate.opsForValue().get(refreshTokenKey); // Fetch serialized refresh token from Redis            return deserializeRefreshToken(serializedRefreshToken); // Deserialize refresh token        } catch (RedisConnectionFailureException e) {            throw new RedisServerNotRunningException("Redis server is not running", e);        }    }    private RefreshToken deserializeRefreshToken(String serializedRefreshToken) throws JsonProcessingException {        return objectMapper.readValue(serializedRefreshToken, RefreshToken.class); // Deserialize refresh token from JSON    }    public String serializeRefreshToken(RefreshToken refreshToken) throws JsonProcessingException {        try {            return objectMapper.writeValueAsString(refreshToken); // Serialize refresh token to JSON        }catch (JsonProcessingException e){            throw new RuntimeException(e);        }    }    public boolean removeToken(String key) {        try {            stringRedisTemplate.delete(key);            return  true;        }catch (Exception e){            throw new RedisServerNotRunningException("failed to delete "+key+" : "+e.getMessage());        }    }}