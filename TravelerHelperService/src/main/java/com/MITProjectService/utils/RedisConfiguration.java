package com.MITProjectService.utils;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;import org.springframework.beans.factory.annotation.Value;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;@Configuration@EnableCachingpublic class RedisConfiguration {    @Value("${spring.redis.database}")    private int database;//    @Bean//    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {//        RedisTemplate<String, Object> template = new RedisTemplate<>();//        template.setConnectionFactory(connectionFactory);//        return template;//    }    @Bean    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {        RedisTemplate<String, Object> template = new RedisTemplate<>();        template.setConnectionFactory(connectionFactory);        // Set custom serializers for keys and values        template.setKeySerializer(new StringRedisSerializer());        template.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));        // Select desired database after connection establishment//        StringRedisTemplate stringTemplate = new StringRedisTemplate(connectionFactory);//        stringTemplate.execute((RedisCallback<Void>) connection -> {//            connection.select(database);//            return null;//        });        return template;    }}