package com.MITProjectService.admin.service.impl;import com.MITProjectService.admin.dao.JpaRepos.AuthoritiesJpaRepo;import com.MITProjectService.admin.dao.JpaRepos.SysUserRepository;import com.MITProjectService.admin.dao.SystemUserRepo;import com.MITProjectService.admin.domain.system.Authorities;import com.MITProjectService.admin.domain.system.SysUser;import com.MITProjectService.admin.domain.system.UserRole;import com.MITProjectService.admin.service.SysUserService;import com.MITProjectService.admin.service.UserRolesService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.HashSet;import java.util.Optional;import java.util.Set;@Servicepublic class SysUserServiceImpl implements SysUserService {    private final SystemUserRepo systemUserRepo;    private final SysUserRepository sysUserRepository;    private final AuthoritiesJpaRepo authoritiesJpaRepo;    private final UserRolesService userRolesService;    @Autowired    public SysUserServiceImpl(SystemUserRepo systemUserRepo, SysUserRepository sysUserRepository, AuthoritiesJpaRepo authoritiesJpaRepo, UserRolesService userRolesService) {        this.systemUserRepo = systemUserRepo;        this.sysUserRepository = sysUserRepository;        this.authoritiesJpaRepo = authoritiesJpaRepo;        this.userRolesService = userRolesService;    }    @Override    public boolean addSysUser(SysUser sysUser) {        sysUser.setCreate_time(new Date());        Authorities authorities = new Authorities();//        UserRole userRole = userRolesService.getReferenceById(sysUser.get) fixme: at home        return systemUserRepo.save(sysUser);    }    @Override    public SysUser findByUserName(String userName) {        return systemUserRepo.findByUserName(userName);    }    @Override    public Page<SysUser> findAll(Specification<SysUser> specification, Pageable pageable) {        return sysUserRepository.findAll(specification,pageable);    }    @Override    @Transactional    public SysUser updateSysUser(SysUser sysUser) {        Optional<SysUser> sysUserOptional = sysUserRepository.findById(Long.valueOf(sysUser.getId()));        if (sysUserOptional.isPresent()){            SysUser updateUser = sysUserOptional.get();            updateUser.setUsername(sysUser.getUsername());            updateUser.setEmail(sysUser.getEmail());            updateUser.setPhone(sysUser.getPhone());            updateUser.setAvatar(sysUser.getAvatar());            updateUser.setUpdate_time(new Date());            if (sysUser.getAuthorities() != null){                Authorities newAuthority = sysUser.getAuthorities();                if (newAuthority.getId() != null) {                    Optional<Authorities> tempObj = authoritiesJpaRepo.findById(newAuthority.getId());                    if (tempObj.isPresent()) {                        Authorities updateAuthority = tempObj.get();                        updateAuthority.setRole(newAuthority.getRole());                        updateUser.setAuthorities(authoritiesJpaRepo.save(updateAuthority));  // Save and set the authority                    } else {                        updateUser.setAuthorities(authoritiesJpaRepo.save(newAuthority));  // Save the new authority                    }                } else {                    updateUser.setAuthorities(authoritiesJpaRepo.save(newAuthority));  // Save the new authority if no ID                }                //sysUserRepository.save(updateUser            }            return sysUserRepository.save(updateUser);        }else {            throw new RuntimeException("SnUser not found");        }    }    @Override    public boolean deleteSysUser(Long id) {        try {            Optional<SysUser> sysUserOptional = sysUserRepository.findById(id);            if (sysUserOptional.isPresent()) {                sysUserRepository.delete(sysUserOptional.get());                sysUserRepository.flush();                return true;            }            return false;        }catch (Exception e){            throw new RuntimeException(e);        }    }}