package com.MITProjectService.admin.service.impl;import com.MITProjectService.admin.dao.AuthoritiesRepo;import com.MITProjectService.admin.dao.SystemUserRepo;import com.MITProjectService.admin.domain.system.Authorities;import com.MITProjectService.admin.domain.system.SysUser;import com.MITProjectService.admin.service.SysUserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;import java.util.Collection;import java.util.Date;import java.util.Set;import java.util.stream.Collectors;@Servicepublic class SysUserServiceImpl implements SysUserService, UserDetailsService {    private final SystemUserRepo systemUserRepo;    private final AuthoritiesRepo authoritiesRepo;    @Autowired    public SysUserServiceImpl(SystemUserRepo systemUserRepo,AuthoritiesRepo authoritiesRepo) {        this.systemUserRepo = systemUserRepo;        this.authoritiesRepo = authoritiesRepo;    }    @Override    public SysUser addSysUser(SysUser sysUser) {        sysUser.setCreate_time(new Date());        return systemUserRepo.save(sysUser);    }    @Override    public SysUser findByUserName(String userName) {        return systemUserRepo.findByUserName(userName);    }    // Spring Security login     @Override    public UserDetails loadUserByUserName(String userName) throws UsernameNotFoundException {        SysUser sysUser = systemUserRepo.findByUserName(userName);        if (sysUser == null) throw new UsernameNotFoundException("Username Not Found");        Set<Authorities> rolesSet = authorities(userName);        return new User(sysUser.getUsername(), sysUser.getPassword(),mapToRoleAuthority(rolesSet));    }    @Override    public Set<Authorities> authorities(String userName) {        return Set.of(authoritiesRepo.setAuthorities(userName));    }    private Collection<? extends GrantedAuthority> mapToRoleAuthority(Collection<Authorities> roles){        return roles.stream().map(role->new SimpleGrantedAuthority(role.getUserName())).collect(Collectors.toList());    }    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        SysUser sysUser = systemUserRepo.findByUserName(username);        if (sysUser == null) throw new UsernameNotFoundException("User not found with username: " + username);        UserDetails userDetails = new MyUserDetails(sysUser);        return userDetails;    }}