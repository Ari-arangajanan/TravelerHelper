package com.MITProjectService.admin.dao.impl;import com.MITProjectService.admin.dao.SystemUserRepo;import com.MITProjectService.admin.domain.system.Authorities;import com.MITProjectService.admin.domain.system.SysUser;import jakarta.persistence.EntityManager;import jakarta.persistence.NoResultException;import jakarta.persistence.TypedQuery;import jakarta.transaction.Transactional;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;@Repositorypublic class SystemUserRepoImpl implements SystemUserRepo {    private final Logger log = LoggerFactory.getLogger(SystemUserRepoImpl.class);    private final EntityManager entityManager;    @Autowired    public SystemUserRepoImpl(EntityManager entityManager) {        this.entityManager = entityManager;    }    @Override    @Transactional    public SysUser save(SysUser sysUser) {        // Ensure authorities are not null        if (sysUser.getAuthorities() != null) {            // Loop through authorities and save if not already persisted            for (Authorities authority : sysUser.getAuthorities()) {                if (authority.getId() == null) {                    entityManager.persist(authority);                }            }        }        entityManager.persist(sysUser);        return null;    }    @Override    public SysUser findByUserName(String name) {        TypedQuery<SysUser> query = entityManager.createQuery("SELECT u FROM SysUser u WHERE u.username = :userName AND u.status = 1", SysUser.class);        query.setParameter("userName", name);        SysUser sysUser = null;        try {            sysUser = query.getSingleResult();            return sysUser;        } catch (NoResultException e) { // Handle case where no user is found            System.out.println("result newfound "+ e);            return null;        } catch (Exception e) {            // Handle other potential exceptions            log.error("Error finding user by username", e);            return null;        }    }}