package com.MITProjectService.admin.dao.impl;import com.MITProjectService.admin.dao.RefreshTokenRepository;import com.MITProjectService.admin.domain.system.RefreshToken;import com.MITProjectService.admin.domain.system.SysUser;import jakarta.persistence.EntityManager;import jakarta.persistence.PersistenceContext;import jakarta.persistence.Query;import jakarta.persistence.TypedQuery;import jakarta.transaction.Transactional;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import java.util.Optional;@Repositorypublic class RefreshTokenRepositoryImpl implements RefreshTokenRepository {//    @PersistenceContext    private final EntityManager entityManager;    @Autowired    public RefreshTokenRepositoryImpl(EntityManager entityManager) {        this.entityManager = entityManager;    }    @Override    public Optional<RefreshToken> findByToken(String token) {        String jpql = "SELECT rt FROM RefreshToken rt WHERE rt.token = :token";        TypedQuery<RefreshToken> query = entityManager.createQuery(jpql, RefreshToken.class);        query.setParameter("token", token);        try {            RefreshToken refreshToken = query.getSingleResult();            return Optional.of(refreshToken);        } catch (Exception e) {            return Optional.empty();        }    }    @Override    @Transactional    public void deleteByUser(SysUser user) {        String jpql = "DELETE FROM RefreshToken rt WHERE rt.user = :user";        Query query = entityManager.createQuery(jpql);        query.setParameter("user", user);        query.executeUpdate();    }    @Override    @Transactional    public void delete(RefreshToken token) {        if (entityManager.contains(token)) {            entityManager.remove(token);        } else {            entityManager.remove(entityManager.merge(token));        }    }    @Override    @Transactional    public RefreshToken save(RefreshToken refreshToken) {        if (refreshToken.getId() == null) {            entityManager.persist(refreshToken);            return refreshToken;        } else {            return entityManager.merge(refreshToken);        }    }}