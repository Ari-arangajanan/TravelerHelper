package com.MITProjectService.bot.dao.jpaRepos.specification;import com.MITProjectService.bot.domain.Bookings;import com.MITProjectService.bot.request.BookingRequest;import jakarta.persistence.criteria.Join;import jakarta.persistence.criteria.Predicate;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;@Servicepublic class BookingFilterSpecification {    public static Specification<Bookings> bookingFilter(BookingRequest request) {        return (root, query, criteriaBuilder) -> {            Predicate predicate = criteriaBuilder.conjunction();            if (request.getBookingId() != null && request.getBookingId() != 0) {                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("id"), request.getBookingId()));            }            if (request.getStatus() != null) {                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("status"), request.getStatus()));            }            if (request.getBookingDateFrom() != null) {                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("bookingDate"), request.getBookingDateFrom()));            }            if (request.getBookingDateTo() != null) {                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("bookingDate"), request.getBookingDateTo()));            }            if (request.getUserId() != null && request.getUserId() != 0) {                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("user").get("id"), request.getUserId()));            }            // filter by service provider (Booking -> Service -> ServiceProvider)            if ((request.getServiceProvider() != null) && (request.getServiceProvider() != 0)) {                Join<Bookings, Service> serviceJoin = root.join("services");                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(serviceJoin.get("serviceProvider").get("id"), request.getServiceProvider()));            }            // Filter by Date Range            if (request.getBookingDateFrom() != null && request.getBookingDateTo() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.or(                                criteriaBuilder.and(                                        criteriaBuilder.greaterThanOrEqualTo(root.get("bookingDateTo"), request.getBookingDateFrom()),                                        criteriaBuilder.lessThanOrEqualTo(root.get("bookingDateFrom"), request.getBookingDateTo())                                )                        ));            }            return predicate;        };    }}