package com.MITProjectService.bot.dao.jpaRepos.specification;import com.MITProjectService.bot.domain.Services;import com.MITProjectService.bot.request.ServiceRequest;import jakarta.persistence.criteria.Predicate;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;@Servicepublic class SnServiceFilterSpecification {    public static Specification<Services> servicesSpecificationFilter(ServiceRequest request) {        return (root, query, criteriaBuilder) -> {            Predicate predicate = criteriaBuilder.conjunction();            if (request.getServiceName() != null && !request.getServiceName().isEmpty()) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.like(criteriaBuilder.lower(root.get("serviceName")), "%" + request.getServiceName().toLowerCase() + "%"));            }            if (request.getDescription() != null && !request.getDescription().isEmpty()) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.like(criteriaBuilder.lower(root.get("description")), "%" + request.getDescription().toLowerCase() + "%"));            }            if (request.getCategoryId() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("category").get("id"), request.getCategoryId()));            }            if (request.getProviderId() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("serviceProvider").get("id"), request.getProviderId()));            }            if (request.getBasePrice() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("basePrice"), request.getBasePrice()));            }            if (request.getStatus() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("status"), request.getStatus()));            }            if (request.getLatitude() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("latitude"), request.getLatitude()));            }            if (request.getLongitude() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("longitude"), request.getLongitude()));            }            if (request.getCreatedAt() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.greaterThanOrEqualTo(root.get("createdAt"), request.getCreatedAt()));            }            if (request.getUpdatedAt() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.lessThanOrEqualTo(root.get("updatedAt"), request.getUpdatedAt()));            }            return predicate;        };    }}