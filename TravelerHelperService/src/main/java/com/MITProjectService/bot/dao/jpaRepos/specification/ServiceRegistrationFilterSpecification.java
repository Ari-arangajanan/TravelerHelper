package com.MITProjectService.bot.dao.jpaRepos.specification;import com.MITProjectService.bot.domain.ServiceRegistration;import com.MITProjectService.bot.request.ServiceRegistrationRequest;import jakarta.persistence.criteria.Predicate;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;@Servicepublic class ServiceRegistrationFilterSpecification {    public static Specification<ServiceRegistration> serviceRegistrationSpecification(ServiceRegistrationRequest request) {        return (root, query, criteriaBuilder) -> {            Predicate predicate = criteriaBuilder.conjunction();            if (request.getServiceName() != null && !request.getServiceName().isEmpty()) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.like(criteriaBuilder.lower(root.get("serviceName")),                                "%" + request.getServiceName().toLowerCase() + "%"));            }            if (request.getDescription() != null && !request.getDescription().isEmpty()) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.like(criteriaBuilder.lower(root.get("description")),                                "%" + request.getDescription().toLowerCase() + "%"));            }            if (request.getCategoryId() != null && request.getCategoryId() != 0) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("categoryId"), request.getCategoryId()));            }            if (request.getServiceProviderId() != null && request.getServiceProviderId() != 0) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("serviceProviderId"), request.getServiceProviderId()));            }            if (request.getBasePrice() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.greaterThanOrEqualTo(root.get("basePrice"), request.getBasePrice()));            }            if (request.getLatitude() != null && request.getLongitude() != null) {                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("latitude"), request.getLatitude()));                predicate = criteriaBuilder.and(predicate,                        criteriaBuilder.equal(root.get("longitude"), request.getLongitude()));            }            return predicate;        };    }}