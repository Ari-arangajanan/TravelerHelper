package com.MITProjectService.bot.Services.impl;import com.MITProjectService.bot.Services.SnUserService;import com.MITProjectService.bot.dao.jpaRepos.UserRepository;import com.MITProjectService.bot.dao.jpaRepos.specification.SnUserFilterSpecification;import com.MITProjectService.bot.domain.SnUser;import com.MITProjectService.bot.request.SnUserRequest;import lombok.NonNull;import org.springframework.beans.BeanUtils;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Optional;@Servicepublic class SnUserServiceImpl implements SnUserService {    private final UserRepository userRepository;    public SnUserServiceImpl(UserRepository userRepository) {        this.userRepository = userRepository;    }    @Override    @Transactional    public void saveUser(SnUser snUser) {        userRepository.save(snUser);    }    @Override    public Page<SnUser> getAllUsers(Specification<SnUser> filter, Pageable pageable) {        return userRepository.findAll(filter, pageable);    }    @Override    public boolean getAUser(@NonNull Long telegramId) {        Specification<SnUser> spec = SnUserFilterSpecification.hasTelegramId(telegramId);        Optional<SnUser> isUserAvailable = userRepository.findOne(spec);        return isUserAvailable.isPresent();    }    @Override    public Optional<SnUser> getUserByID(Long id) {        return userRepository.findById(id);    }    @Override    @Transactional    public void deleteUser(Long id) {        userRepository.deleteById(id);    }    @Override    @Transactional    public SnUser updateUser(SnUser request) {        SnUser user = userRepository.getReferenceById(request.getId());        BeanUtils.copyProperties(request,user);        userRepository.save(user);        return user;    }}