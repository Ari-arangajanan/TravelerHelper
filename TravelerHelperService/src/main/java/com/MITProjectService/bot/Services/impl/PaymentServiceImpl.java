package com.MITProjectService.bot.Services.impl;import com.MITProjectService.bot.Services.BookingService;import com.MITProjectService.bot.Services.PayHereService;import com.MITProjectService.bot.Services.PaymentLogService;import com.MITProjectService.bot.Services.PaymentService;import com.MITProjectService.bot.dao.jpaRepos.PaymentRepository;import com.MITProjectService.bot.domain.Bookings;import com.MITProjectService.bot.domain.Payment;import com.MITProjectService.bot.domain.PaymentLogs;import com.MITProjectService.bot.enums.PaymentGateWayEnum;import com.MITProjectService.bot.enums.PaymentMethodEnum;import com.MITProjectService.bot.enums.PaymentServiceEnum;import com.MITProjectService.bot.request.PaymentRequest;import jakarta.annotation.Resource;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Optional;@Servicepublic class PaymentServiceImpl implements PaymentService {    @Resource    private PaymentRepository paymentRepository;    @Resource    private PayHereService payHereService;    @Resource    @Lazy    private BookingService bookingService;    @Resource    private PaymentLogService paymentLogsService;    /**     * Processes a payment request based on the specified payment method.     * <p>     * The method first retrieves the booking associated with the given booking ID.     * If the booking is not found, it throws a {@link RuntimeException}.     * Based on the payment method, it delegates processing to the appropriate payment gateway.     * </p>     *     * @param paymentRequest The {@link PaymentRequest} containing payment details.     * @return A response string indicating the payment status.     * @throws RuntimeException If the booking is not found or an unsupported payment method is used.     */    @Override    @Transactional    public String pay(PaymentRequest paymentRequest) {        // Retrieve booking details using the booking ID        Bookings booking = bookingService.getBookingById(paymentRequest.getBookingId());        if(booking == null){            throw new RuntimeException("Booking not found");        }        paymentRequest.setBooking(booking);        return switch (PaymentMethodEnum.fromName(paymentRequest.getPaymentMethod())) {            case CASH -> "false";  // todo: implement later with cash payment            case ONLINE -> "false"; // todo: implement later with online payment gateway            case CARD -> {                paymentRequest.setPaymentMethod(PaymentMethodEnum.CARD.getName());                yield payHereService.doPayment(paymentRequest);            }            default -> "false";        };    }    /**     * Saves or updates a payment record in the database.     * <p>     * If the payment object contains an existing ID, it updates the record;     * otherwise, it creates a new one.     * </p>     *     * @param payment The {@link Payment} object to be saved or updated.     * @return The persisted {@link Payment} object with updated details.     * @throws IllegalArgumentException If the provided payment object is {@code null}.     */    @Override    public Payment saveOrUpdate(Payment payment) {        return paymentRepository.save(payment);    }    /**     * Retrieves the payment record associated with the given booking ID.     *     * @param bookingId The unique identifier of the booking.     * @return The {@link Payment} associated with the booking ID.     * @throws RuntimeException If no payment is found for the given booking ID.     */    @Override    public Payment findByBookingId(Long bookingId) {        return paymentRepository.getByBookingId(bookingId);    }    /**     * Retrieves the payment invoice based on the provided payment request.     *     * @param paymentRequest The request containing the order ID for retrieving the payment.     * @return The {@link Payment} associated with the given order ID.     * @throws RuntimeException If no payment is found for the given order ID.     */    @Override    public Payment getInvoice(PaymentRequest paymentRequest) {        // Retrieve booking details using the booking ID        return findPaymentByOrderId(paymentRequest.getOrderId());    }    /**     * Processes a successful payment through the PayHere payment gateway.     * <p>     * This method verifies if a payment exists for the given order ID, ensures that it is not already marked as paid,     * updates the payment details (including payment method and gateway), and saves the changes.     * Additionally, it records the transaction in the payment logs.     * </p>     *     * @param paymentRequest The payment request containing the order ID and user ID.     * @return The updated {@link Payment} object after marking it as paid.     * @throws RuntimeException If no payment is found for the given order ID.     */    @Override    @Transactional    public Payment payHerePaymentSuccess(PaymentRequest paymentRequest) {        Optional<Payment> payment = Optional.ofNullable(findPaymentByOrderId(paymentRequest.getOrderId()));        if(payment.isEmpty()){            throw new RuntimeException("Payment not found, orderId: " + paymentRequest.getOrderId());        }        if (payment.get().getPaymentStatus() == PaymentServiceEnum.PAID.getValue()) {            return payment.get(); // this means payment is already paid        }        // Update payment details with the method and gateway used        payment.get().setPaymentMethod(PaymentMethodEnum.CARD.getName());        payment.get().setPaymentGateway(PaymentGateWayEnum.PAYHERE.getName());        payment.get().setPaymentStatus(PaymentServiceEnum.PAID.getValue());        payment = Optional.of(paymentRepository.saveAndFlush(payment.get()));        // Create and save a new payment log entry        PaymentLogs paymentLogs = new PaymentLogs();        paymentLogs.setPayment(payment.get());        paymentLogs.setUserId(paymentRequest.getUserId());        paymentLogs.setBookings(payment.get().getBooking());        paymentLogsService.save(paymentLogs);        return payment.get();    }    /**     * Retrieves a payment record by its order ID.     *     * @param orderId The unique identifier of the order.     * @return The {@link Payment} object if found, otherwise {@code null}.     */    private Payment findPaymentByOrderId(String orderId) {        return paymentRepository.getByOrderId(orderId);    }}