package com.MITProjectService.bot.Services.impl;import com.MITProjectService.bot.dao.jpaRepos.ServiceProviderRepository;import com.MITProjectService.bot.dao.jpaRepos.ServiceRegistrationRepository;import com.MITProjectService.bot.domain.ServiceAttribute;import com.MITProjectService.bot.domain.ServiceProvider;import com.MITProjectService.bot.domain.ServiceRegistration;import com.MITProjectService.bot.request.dto.ServiceRegistrationDTO;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import com.MITProjectService.bot.Services.ServiceRegistrationService;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.stream.Collectors;@Servicepublic class ServiceRegistrationServiceImpl implements ServiceRegistrationService {    private final ServiceRegistrationRepository serviceRegistrationRepository;    private final ServiceProviderRepository serviceProviderRepository;    public ServiceRegistrationServiceImpl(ServiceRegistrationRepository serviceRegistrationRepository, ServiceProviderRepository serviceProviderRepository) {        this.serviceRegistrationRepository = serviceRegistrationRepository;        this.serviceProviderRepository = serviceProviderRepository;    }    @Override    @Transactional    public ServiceRegistration submitServiceRegistration(ServiceRegistrationDTO dto) {        try {            // Validate provider exists            ServiceProvider serviceProvider = serviceProviderRepository.findById(dto.getServiceProviderId())                    .orElseThrow(() -> new IllegalArgumentException("Invalid Service Provider ID"));            // Create and save registration            ServiceRegistration registration = new ServiceRegistration();            registration.setServiceName(dto.getServiceName());            registration.setDescription(dto.getDescription());            registration.setCategoryId(dto.getCategoryId());            registration.setBasePrice(dto.getBasePrice());            registration.setLatitude(dto.getLatitude());            registration.setLongitude(dto.getLongitude());            registration.setStatus(com.MITProjectService.bot.enums.ServiceRegistration.PENDING.getVal());            registration.setRegistrationDate(java.time.LocalDateTime.now());            registration.setRegisteredBy(serviceProvider);            registration = serviceRegistrationRepository.save(registration);            ServiceRegistration finalRegistration = registration;            // create and fix the service attributes            List<ServiceAttribute> attributes = dto.getAttributes().stream()                            .map(attributesSet ->{                                ServiceAttribute serviceAttribute = new ServiceAttribute();                                serviceAttribute.setServiceRegistration(finalRegistration);                                serviceAttribute.setAttributeName(attributesSet.getAttributeName());                                serviceAttribute.setAttributeValue(attributesSet.getAttributeValue());                                return serviceAttribute;                            }).collect(Collectors.toList());            registration.setAttributes(attributes);            return serviceRegistrationRepository.save(registration);        } catch (Exception e) {            throw new RuntimeException(e);        }    }    @Override    public Page<ServiceRegistration> getAllRegistrations(Pageable pageable, Long providerId) {        return serviceRegistrationRepository.findByProviderId(providerId,pageable);    }    @Override    public ServiceRegistration getRegistrationDetails(Long registrationId) {        return serviceRegistrationRepository.getReferenceById(registrationId);    }    @Override    public Page<ServiceRegistration> getAllRegistrationsPage(PageRequest pageable, Specification<ServiceRegistration> specification) {        return serviceRegistrationRepository.findAll(specification,pageable);    }}