package com.MITProjectService.bot.Services.impl;import com.MITProjectService.bot.Services.BookingService;import com.MITProjectService.bot.dao.jpaRepos.BookingServiceRepository;import com.MITProjectService.bot.dao.jpaRepos.ServiceTypeRepository;import com.MITProjectService.bot.dao.jpaRepos.UserRepository;import com.MITProjectService.bot.domain.Bookings;import com.MITProjectService.bot.domain.ServiceType;import com.MITProjectService.bot.domain.SnUser;import com.MITProjectService.bot.enums.BookingStatusEnum;import com.MITProjectService.bot.request.BookingRequest;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Optional;@Servicepublic class BookingServiceImpl implements BookingService {    private final BookingServiceRepository bookingServiceRepository;    private final ServiceTypeRepository serviceTypeRepository;    private final UserRepository userRepository;    public BookingServiceImpl(BookingServiceRepository bookingServiceRepository, ServiceTypeRepository serviceTypeRepository, UserRepository userRepository) {        this.bookingServiceRepository = bookingServiceRepository;        this.serviceTypeRepository = serviceTypeRepository;        this.userRepository = userRepository;    }    @Override    @Transactional    public Bookings submitBooking(BookingRequest request) {        try {            Optional<SnUser> user = userRepository.getUserByTelegramId(request.getUserTelegramIdId());            Optional<ServiceType> serviceType = serviceTypeRepository.findById(request.getServiceTypeId());            if (user.isPresent() && serviceType.isPresent()) {                Bookings booking = new Bookings();                booking.setServiceType(serviceType.get());                booking.setUser(user.get());                booking.setBookingDateFrom(request.getBookingDateFrom());                booking.setBookingDateTo(request.getBookingDateTo());                booking.setStatus(BookingStatusEnum.PENDING.getValue());                booking.setPrice(serviceType.get().getPrice());                return bookingServiceRepository.save(booking);            }else return null;        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException("Error in BookingServiceImpl.submitBooking " + e.getMessage());        }    }    @Override    @Transactional    public Bookings updateBookingStatus(BookingRequest request) {        Optional<Bookings> booking = bookingServiceRepository.findById(request.getBookingId());        try{            if (booking.isPresent() && request.getStatus().equals(BookingStatusEnum.ACCEPTED)) {                booking.get().setStatus(BookingStatusEnum.fromString(String.valueOf(request.getStatus())).getValue());                return bookingServiceRepository.save(booking.get());            }else {                booking.get().setStatus(BookingStatusEnum.fromString(String.valueOf(request.getStatus())).getValue());                booking.get().setRejectReason(request.getRejectReason());                return bookingServiceRepository.save(booking.get());            }        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException("Error in BookingServiceImpl.updateBookingStatus " + e.getMessage());        }    }    @Override    public Bookings getBookingById(Long id) {        Optional<Bookings> booking = bookingServiceRepository.findById(id);        return booking.get();    }    @Override    public Page<Bookings> getAllBookingsPage(Pageable pageable, Specification<Bookings> specification) {        try {            return bookingServiceRepository.findAll(specification, pageable);        } catch (Exception e) {            e.printStackTrace();            System.out.println("Error in BookingServiceImpl.getAllBookingsPage " + e.getMessage());            throw new RuntimeException("Error in BookingServiceImpl.getAllBookingsPage " + e.getMessage());        }    }}