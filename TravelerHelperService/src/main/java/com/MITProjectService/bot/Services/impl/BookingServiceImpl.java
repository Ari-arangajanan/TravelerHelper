package com.MITProjectService.bot.Services.impl;import com.MITProjectService.bot.Services.BookingService;import com.MITProjectService.bot.dao.jpaRepos.BookingServiceRepository;import com.MITProjectService.bot.dao.jpaRepos.ServiceTypeRepository;import com.MITProjectService.bot.dao.jpaRepos.UserRepository;import com.MITProjectService.bot.domain.Bookings;import com.MITProjectService.bot.domain.ServiceType;import com.MITProjectService.bot.domain.SnUser;import com.MITProjectService.bot.enums.BookingStatusEnum;import com.MITProjectService.bot.request.BookingRequest;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.util.Optional;@Service@RequiredArgsConstructorpublic class BookingServiceImpl implements BookingService {    private  final BookingServiceRepository bookingServiceRepository;    private final ServiceTypeRepository serviceTypeRepository;    private final UserRepository userRepository;    @Override    public Bookings submitBooking(BookingRequest request) {        try {            Optional<SnUser> user = userRepository.getUserByTelegramId(request.getUserTelegramIdId());            Optional<ServiceType> serviceType = serviceTypeRepository.findById(request.getServiceTypeId());            if (user.isPresent() && serviceType.isPresent()) {                Bookings booking = new Bookings();                booking.setServiceType(serviceType.get());                booking.setUser(user.get());                booking.setStatus(BookingStatusEnum.PENDING.getValue());                booking.setPrice(serviceType.get().getPrice());                return bookingServiceRepository.save(booking);            }else return null;        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException("Error in BookingServiceImpl.submitBooking " + e.getMessage());        }    }}