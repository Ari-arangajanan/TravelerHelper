package com.MITProjectService.bot.domain;import com.fasterxml.jackson.annotation.JsonBackReference;import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonProperty;import jakarta.persistence.*;import lombok.Data;import lombok.ToString;import java.time.LocalDateTime;import java.util.List;@Data@Entity@Table(name = "services")public class Services {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    @Column(name = "id")    private Long id;    @Column(name = "service_name", nullable = false)    private String serviceName;    @Column(name = "description")    private String description;    @ManyToOne    @JoinColumn(name = "category_id", referencedColumnName = "id",nullable = false)    @JsonIgnore    private ServiceCategory category; // Links to ServiceCategory    @ManyToOne    @JoinColumn(name = "provider_id", nullable = false)    @JsonBackReference    private ServiceProvider serviceProvider; // Links to ServiceProvider    @OneToOne(mappedBy = "services", cascade = CascadeType.ALL)    @ToString.Exclude    @JsonIgnore    private ServiceRegistration registration; // Links to ServiceRegistrationEnum    @Column(name = "base_price", nullable = false)    private Double basePrice;    @Column(name = "status", nullable = false)    private int status; // e.g., 1 for Active, 0 for Inactive    @Column(name = "latitude", nullable = false)    private Double latitude; // Latitude of the service location    @Column(name = "longitude", nullable = false)    private Double longitude; // Longitude of the service location    @Column(name = "created_at", nullable = false, updatable = false)    private LocalDateTime createdAt;    @Column(name = "updated_at")    private LocalDateTime updatedAt;    // Derived relationship to fetch attributes    @Transient    @JsonProperty("attributes")    public List<ServiceAttribute> getAttributes() {        if (registration != null) {            return registration.getAttributes();        }        return null;    }    @Transient    @JsonProperty("category_id")    public Long getCategoryId() {        return category != null ? category.getId() : null;    }    @PrePersist    protected void onCreate() {        createdAt = LocalDateTime.now();    }    @PreUpdate    protected void onUpdate() {        updatedAt = LocalDateTime.now();    }}