package com.MITProjectCommon.common;import java.math.BigInteger;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.text.DecimalFormat;import java.text.DecimalFormatSymbols;import java.util.Locale;/** * Utility class for common operations related to PayHere integration. * Provides methods for hashing data using MD5 and formatting currency amounts. */public class PayHereUtils {    /**     * Generates an MD5 hash of the given input string.     *     * @param input The input string to be hashed.     * @return A 32-character uppercase MD5 hash of the input.     * @throws RuntimeException if the MD5 algorithm is not available.     */    public static String getMd5(String input) {        try {            MessageDigest md = MessageDigest.getInstance("MD5");            byte[] messageDigest = md.digest(input.getBytes());            BigInteger no = new BigInteger(1, messageDigest);            String hashtext = no.toString(16);            while (hashtext.length() < 32) {                hashtext = "0" + hashtext;            }            return hashtext.toUpperCase();        }        catch (NoSuchAlgorithmException e) {            throw new RuntimeException("MD5 algorithm not found", e);        }    }    /**     * Formats a given amount as a string with two decimal places.     * Ensures consistency by using US locale decimal formatting.     *     * @param amount The amount to be formatted.     * @return A string representing the amount with exactly two decimal places.     */    public static String formatAmount(double amount) {        // Create a DecimalFormat with the desired pattern        DecimalFormat df = new DecimalFormat("0.00"); // Two decimal places        // Optionally, set the locale to ensure consistent decimal separators        // This is important for PayHere, as they likely expect a specific format        DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US); // Or another locale        df.setDecimalFormatSymbols(symbols);        return df.format(amount);    }}