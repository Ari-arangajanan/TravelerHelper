package com.MITProject.TravelerHelperBot.botService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import org.telegram.telegrambots.bots.TelegramWebhookBot;import org.telegram.telegrambots.meta.api.methods.BotApiMethod;import org.telegram.telegrambots.meta.api.objects.Update;@Componentpublic class TelegramWebHooksService extends TelegramWebhookBot {    @Autowired    private TelegramBotChats telegramBotChats;    @Value("${telegram.bot.username}")    private String botUsername;    @Value("${telegram.bot.token}")    private String botToken;    @Value("${telegram.bot.webhookPath}")    private String webhookPath;//    @Value("${stripe.api}")//    private String stripeKey;    @Override    public String getBotPath() {        return webhookPath;    }    @Override    public String getBotUsername() {        return botUsername;    }    @Override    public String getBotToken() {        return botToken;    }    @Override    public void onRegister() {        super.onRegister();    }    @Override    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {        // switch case to catch the incoming message        if (update.hasMessage() || update.hasCallbackQuery()) {            Long chatId = null;            if (update.hasMessage()) {                chatId = update.getMessage().getChatId();            } else if (update.hasCallbackQuery()) {                chatId = update.getCallbackQuery().getFrom().getId();            }            String text = "";            if (update.getMessage() != null) {                text = update.getMessage().getText();                if (text == null) {                    text = "/";                }            }            else if (update.getCallbackQuery() != null) {                text = update.getCallbackQuery().getData();            }else if (update.getMessage().getLocation() !=null){                System.out.println("location: "+ update.getMessage().getLocation());            }            switch (text.toLowerCase()) {                case "/start":                    assert chatId != null;                    try {                        execute(telegramBotChats.sendWelcomeMessage(chatId));                    } catch (Exception e) {                        throw new RuntimeException(e);                    }                    break;                case "user":                    System.out.println("user---------------------------------------------");                    return telegramBotChats.saveUser(update, chatId);                    // Handle user button click                    // return a response or message for the user action                case "service_provider":                    System.out.println("service_provider---------------------------------------------");                    return telegramBotChats.saveServiceProvider(update, chatId);                    // Handle service provider button click                    // return a response or message for the service provider action                case "/":                    break;                default:                    break;            }        }        return null;    }}