package com.MITProject.TravelerHelperBot.botService;import com.MITProjectService.bot.Services.ServiceProviderService;import com.MITProjectService.bot.Services.SnUserService;import com.MITProjectService.bot.domain.ServiceProvider;import com.MITProjectService.bot.domain.SnUser;import com.MITProjectService.bot.enums.UserEnums;import com.MITProjectService.exceptionhandling.DataTransactionalException;import org.springframework.stereotype.Component;import org.telegram.telegrambots.meta.api.methods.send.SendAnimation;import org.telegram.telegrambots.meta.api.methods.send.SendMessage;import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;import org.telegram.telegrambots.meta.api.objects.InputFile;import org.telegram.telegrambots.meta.api.objects.Update;import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;import java.util.Date;import java.util.List;@Componentpublic class TelegramBotChats extends InlineBtnMarkUp{    private final SnUserService snUserService;    private final ServiceProviderService serviceProviderService;    SendMessage sendMessage = new SendMessage();    SendPhoto sendPhoto = new SendPhoto();    SendAnimation sendAnimation = new SendAnimation();    public TelegramBotChats(SnUserService userService, ServiceProviderService serviceProviderService) {        this.snUserService = userService;        this.serviceProviderService = serviceProviderService;    }    public SendAnimation sendWelcomeMessage(Long chatId) throws Exception {        sendAnimation.setAnimation(new InputFile("https://r2n0.sg.idrivee2-46.com/travelhelperbot/Welcome.gif?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=UFIGNYDOP.2371206DB0%2F20241027%2Fus-west-1%2Fs3%2Faws4_request&X-Amz-Date=20241027T193630Z&X-Amz-Expires=3600&X-Amz-Signature=f3f1b89d4f5bb382ccd65d336f5e3ffc8eecd1e51b270b3223888e691236e50b&X-Amz-SignedHeaders=host&versionId=null&x-id=GetObject"));        sendAnimation.setChatId(chatId.toString());        sendAnimation.setCaption("Welcome to the Travel Assistant Bot!");        List<String> btnLbl = List.of("SnUser", "Service Provider");        List<String> btnCallBack  = List.of("user", "service_provider");        InlineKeyboardMarkup inlineBtnMarkUp = inlineKeyboardMarkup(btnLbl, btnCallBack);        sendAnimation.setReplyMarkup(inlineBtnMarkUp);        return sendAnimation;    }    public SendMessage saveUser(Update update, Long chatId) {        try{            SnUser snUser = new SnUser();            snUser.setTelegramId(update.getCallbackQuery().getFrom().getId());            snUser.setUserName(update.getCallbackQuery().getFrom().getUserName());            snUser.setFirstName(update.getCallbackQuery().getFrom().getFirstName());            snUser.setLastName(update.getCallbackQuery().getFrom().getLastName());            snUser.setPreferredLanguage(update.getCallbackQuery().getFrom().getLanguageCode());            snUser.setRegistrationDate(new Date());            snUser.setStatus(UserEnums.ENABLED.getVal());            snUser.setType(UserEnums.USER.getVal());            snUserService.saveUser(snUser);        } catch (DataTransactionalException e) {            throw new RuntimeException(e);        }        sendMessage.setChatId(chatId);        sendMessage.setText("successfully Enrolled");        return sendMessage;    }    public SendMessage saveServiceProvider(Update update, Long chatId) {        try{            ServiceProvider serviceProvider = new ServiceProvider();            serviceProvider.setTelegramId(update.getCallbackQuery().getFrom().getId());            serviceProvider.setUserName(update.getCallbackQuery().getFrom().getUserName());            serviceProvider.setFirstName(update.getCallbackQuery().getFrom().getFirstName());            serviceProvider.setLastName(update.getCallbackQuery().getFrom().getLastName());            serviceProvider.setPreferredLanguage(update.getCallbackQuery().getFrom().getLanguageCode());            serviceProvider.setRegistrationDate(new Date());            serviceProvider.setStatus(UserEnums.ENABLED.getVal());            serviceProvider.setType(UserEnums.SERVICE_PROVIDER.getVal());            serviceProviderService.saveServiceProvider(serviceProvider);        } catch (DataTransactionalException e) {            throw new RuntimeException(e);        }        sendMessage.setChatId(chatId);        sendMessage.setText("successfully Enrolled");        return sendMessage;    }}