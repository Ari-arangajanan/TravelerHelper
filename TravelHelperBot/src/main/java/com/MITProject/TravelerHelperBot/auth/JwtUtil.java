package com.MITProject.TravelerHelperBot.auth;import com.MITProjectService.bot.domain.SnUser;import com.MITProjectService.bot.enums.UserEnums;import io.jsonwebtoken.*;import io.jsonwebtoken.security.Keys;import jakarta.annotation.PostConstruct;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import java.security.Key;import java.util.Date;import java.util.HashMap;import java.util.Map;@Componentpublic class JwtUtil {    private static Key key;    private static long EXPIRATION_TIME;    private static String DEFAULT_SECRET;    @Value("${jwt.jwtExpirationMs}")    private long expirationTime;    @Value("${jwt.secret}")    private String defaultSecret;    @PostConstruct    public void init() {        EXPIRATION_TIME = expirationTime * 12;        DEFAULT_SECRET = defaultSecret;        key = Keys.hmacShaKeyFor(DEFAULT_SECRET.getBytes());    }    public static String generateToken(SnUser user) {        Map<String, Object> claims = new HashMap<>();        claims.put("userType", UserEnums.fromVal(user.getType()));        claims.put("telegramId", user.getTelegramId());        claims.put("useId", user.getId());        return Jwts.builder()                .setClaims(claims)                .setSubject("Telegram Authentication")                .setIssuedAt(new Date())                .setExpiration(new Date(System.currentTimeMillis()+EXPIRATION_TIME))                .signWith(key)                .compact();    }    public static Claims validateToken(String token) {        return Jwts.parserBuilder()                .setSigningKey(key)                .build()                .parseClaimsJws(token)                .getBody();    }    public static Long getTelegramIdFromToken(String token) {        Claims claims = validateToken(token);        Long telegramId = claims.get("telegramId", Long.class);        return telegramId != null ? telegramId : -1;    }    public static Long getUserIdByToken(String token) {        Claims claims = validateToken(token);        Long userId = claims.get("useId", Long.class);        return userId != null ? userId : -1;    }    public static UserEnums getUserTypeFromToken(String token) {        Claims claims = validateToken(token);        UserEnums userType = claims.get("userType", UserEnums.class);        return userType != null ? userType : UserEnums.UNKNOWN;    }}