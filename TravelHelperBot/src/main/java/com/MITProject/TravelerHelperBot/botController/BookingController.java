package com.MITProject.TravelerHelperBot.botController;import com.MITProject.TravelerHelperBot.auth.JwtUtil;import com.MITProjectCommon.commonAPIResponce.ApiResponse;import com.MITProjectService.bot.Services.BookingService;import com.MITProjectService.bot.dao.jpaRepos.specification.BookingFilterSpecification;import com.MITProjectService.bot.domain.Bookings;import com.MITProjectService.bot.request.BookingRequest;import jakarta.servlet.http.HttpServletRequest;import lombok.extern.slf4j.Slf4j;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.Optional;@Slf4j@RestController@RequestMapping(path = "app/user/bookings")public class BookingController {    private final BookingService bookingService;    public BookingController(BookingService bookingService) {        this.bookingService = bookingService;    }    @PostMapping(value = "/submitBooking")    public ResponseEntity<ApiResponse<Bookings>> submitBooking(@Valid @RequestBody BookingRequest request, HttpServletRequest httpServletRequest) {        Optional<String> headerToken = Optional.of(httpServletRequest.getHeader("Authorization"));        String token = headerToken.get().replace("Bearer ", "");        Optional<Long> userId = Optional.of(JwtUtil.getTelegramIdFromToken(token));        request.setUserTelegramIdId(userId.get());        try        {            Bookings booking = bookingService.submitBooking(request);            if (booking != null) {                return ResponseEntity.ok(new ApiResponse<>("Booking created successfully",booking,true));            }else {                return ResponseEntity.ok(new ApiResponse<>("Booking not created It May Inactive for Now",null,false));            }        } catch (Exception e) {            if (e.getMessage().contains("Service Inactive")) {                return ResponseEntity.ok(new ApiResponse<>("Service Inactive",null,false));            }            log.error("Error in BookingController.submitBooking {}", e.getMessage());            return ResponseEntity.internalServerError().body(new ApiResponse<>("Error in BookingController.submitBooking " + e.getMessage(),null,false));        }    }    // Get Booking by ID    @PostMapping("/getOneBooking")    public ResponseEntity<ApiResponse<Bookings>> getBookingById(@RequestBody Long id) {        try {            Bookings booking = bookingService.getBookingById(id);            if (booking == null) {                return ResponseEntity.ok(new ApiResponse<>("Booking not found", null, false));            }            return ResponseEntity.ok(new ApiResponse<>("Booking retrieved successfully", booking, true));        } catch (Exception e) {            return ResponseEntity.internalServerError()                    .body(new ApiResponse<>("Failed to retrieve booking: " + e.getMessage(), null, false));        }    }    // Get All Bookings    @PostMapping("/getAllMyServices")    public ResponseEntity<Page<Bookings>> getAllBookings(@RequestBody BookingRequest request, HttpServletRequest httpServletRequest) {        try {            String token = httpServletRequest.getHeader("Authorization").replace("Bearer ", "");            Long userId = JwtUtil.getTelegramIdFromToken(token);            request.setUserTelegramIdId(userId);            request.setUserId(JwtUtil.getUserIdByToken(token));            Pageable pageable = PageRequest.of(request.getPage(), request.getLimit());            Specification<Bookings> specification = BookingFilterSpecification.bookingFilter(request);            Page<Bookings> bookings = bookingService.getAllBookingsPage(pageable, specification);            return ResponseEntity.ok( bookings);        } catch (Exception e) {            return ResponseEntity.noContent().build();        }    }}