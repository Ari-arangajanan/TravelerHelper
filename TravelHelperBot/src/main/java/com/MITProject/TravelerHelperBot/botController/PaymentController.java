package com.MITProject.TravelerHelperBot.botController;import com.MITProject.TravelerHelperBot.auth.JwtUtil;import com.MITProjectService.bot.Services.PaymentService;import com.MITProjectService.bot.domain.Payment;import com.MITProjectService.bot.request.PaymentRequest;import jakarta.annotation.Resource;import jakarta.servlet.http.HttpServletRequest;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.Map;@RestController@RequestMapping(path = "app/user/payment")@RequiredArgsConstructorpublic class PaymentController {    @Resource    private PaymentService paymentService;    @PostMapping("/pay")    public ResponseEntity<?> pay(@RequestBody PaymentRequest paymentRequest, HttpServletRequest httpServletRequest) {        Long userId = JwtUtil.getUserIdByToken(httpServletRequest.getHeader("Authorization").replace("Bearer ", ""));        paymentRequest.setUserId(userId);        return ResponseEntity.ok(paymentService.pay(paymentRequest));    }    @GetMapping("/success")    public String paymentSuccess(@RequestParam Map<String, String> params) {        System.out.println("Payment Success: " + params);        return "Payment successful! Transaction ID: " + params.get("order_id");    }    @GetMapping("/cancel")    public String paymentCancelled() {        System.out.println("Payment Cancelled");        return "Payment cancelled by the user.";    }    @PostMapping("/notify")    public String paymentNotification(@RequestParam Map<String, String> params) {        System.out.println("Payment Notification Received: " + params);        return "Notification received";    }    @PostMapping("/getInvoice")    public ResponseEntity<Payment> getInvoice(@RequestBody PaymentRequest paymentRequest, HttpServletRequest httpServletRequest) {        Long userId = JwtUtil.getUserIdByToken(httpServletRequest.getHeader("Authorization").replace("Bearer ", ""));        paymentRequest.setUserId(userId);        return ResponseEntity.ok(paymentService.getInvoice(paymentRequest));    }}