package com.MITProject.TravelerHelperBot.botController;import com.MITProject.TravelerHelperBot.auth.JwtUtil;import com.MITProjectService.bot.Services.PaymentService;import com.MITProjectService.bot.domain.Payment;import com.MITProjectService.bot.request.PaymentRequest;import jakarta.annotation.Resource;import jakarta.servlet.http.HttpServletRequest;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.Map;@RestController@RequestMapping(path = "app/user/payment")@RequiredArgsConstructorpublic class PaymentController {    @Resource    private PaymentService paymentService;    /**     * Handles the payment request by processing the payment based on the provided details.     *     * @param paymentRequest The {@link PaymentRequest} containing payment details.     * @param httpServletRequest The {@link HttpServletRequest} to extract the Authorization token.     * @return A {@link ResponseEntity} containing the result of the payment process.     * @throws RuntimeException If an error occurs during the payment processing.     */    @PostMapping("/pay")    public ResponseEntity<?> pay(@RequestBody PaymentRequest paymentRequest, HttpServletRequest httpServletRequest) {        Long userId = JwtUtil.getUserIdByToken(httpServletRequest.getHeader("Authorization").replace("Bearer ", ""));        paymentRequest.setUserId(userId);        return ResponseEntity.ok(paymentService.pay(paymentRequest));    }    /**     * Handles the payment success notification and processes the payment success.     * <p>     * This method is invoked when a payment is successfully processed via the PayHere gateway.     * It retrieves the user ID from the Authorization token and updates the payment status accordingly.     * </p>     *     * @param paymentRequest The {@link PaymentRequest} containing payment success details.     * @param httpServletRequest The {@link HttpServletRequest} to extract the Authorization token.     * @return A {@link ResponseEntity} containing the updated {@link Payment} object if successful.     * @throws RuntimeException If there is an error processing the payment success.     */    @PostMapping("/paySuccess")    public ResponseEntity<Payment>  paymentSuccess(@RequestBody PaymentRequest paymentRequest, HttpServletRequest httpServletRequest) {        Long userId = JwtUtil.getUserIdByToken(httpServletRequest.getHeader("Authorization").replace("Bearer ", ""));        paymentRequest.setUserId(userId);        return ResponseEntity.ok(paymentService.payHerePaymentSuccess(paymentRequest));    }    /**     * Handles the payment cancellation scenario where the user cancels the payment.     * <p>     * This method is called when a payment is cancelled by the user. It logs the cancellation     * and returns a response indicating the payment was cancelled.     * </p>     *     * @return A string message indicating that the payment was cancelled by the user.     */    @GetMapping("/cancel")    public String paymentCancelled() {        System.out.println("Payment Cancelled");        return "Payment cancelled by the user.";    }    /**     * Receives and processes a payment notification from a payment gateway.     * <p>     * This method is triggered when a payment gateway sends a notification about the payment status.     * It logs the received notification details and returns a confirmation response.     * </p>     *     * @param params A map of parameters received from the payment gateway, typically containing payment details.     * @return A string message confirming that the notification was received.     * @throws IllegalArgumentException If the required parameters are missing or invalid.     */    @PostMapping("/notify")    public String paymentNotification(@RequestParam Map<String, String> params) {        System.out.println("Payment Notification Received: " + params);        return "Notification received";    }    /**     * Retrieves the payment invoice associated with the provided payment request.     * <p>     * This method fetches the payment invoice details using the order ID from the payment request,     * and validates the Authorization token before proceeding.     * </p>     *     * @param paymentRequest The {@link PaymentRequest} containing the order ID and payment details.     * @param httpServletRequest The {@link HttpServletRequest} to extract the Authorization token.     * @return A {@link ResponseEntity} containing the {@link Payment} object if found.     * @throws RuntimeException If the payment invoice is not found or an error occurs while fetching it.     */    @PostMapping("/getInvoice")    public ResponseEntity<Payment> getInvoice(@RequestBody PaymentRequest paymentRequest, HttpServletRequest httpServletRequest) {        Long userId = JwtUtil.getUserIdByToken(httpServletRequest.getHeader("Authorization").replace("Bearer ", ""));        paymentRequest.setUserId(userId);        return ResponseEntity.ok(paymentService.getInvoice(paymentRequest));    }}