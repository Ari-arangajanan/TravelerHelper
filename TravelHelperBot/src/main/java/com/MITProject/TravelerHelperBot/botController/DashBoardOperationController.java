package com.MITProject.TravelerHelperBot.botController;import com.MITProject.TravelerHelperBot.auth.JwtUtil;import com.MITProjectCommon.commonAPIResponce.ApiResponse;import com.MITProjectService.bot.Services.BookingService;import com.MITProjectService.bot.dao.jpaRepos.specification.BookingFilterSpecification;import com.MITProjectService.bot.domain.Bookings;import com.MITProjectService.bot.request.BookingRequest;import jakarta.servlet.http.HttpServletRequest;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping(path = "app/serviceProvider/dashboard")@RequiredArgsConstructorpublic class DashBoardOperationController {    private final BookingService bookingService;    // Get Booking by ID    @GetMapping("/getOneBooking")    public ResponseEntity<ApiResponse<Bookings>> getBookingById(@RequestBody Long id) {        try {            Bookings booking = bookingService.getBookingById(id);            if (booking == null) {                return ResponseEntity.ok(new ApiResponse<>("Booking not found", null, false));            }            return ResponseEntity.ok(new ApiResponse<>("Booking retrieved successfully", booking, true));        } catch (Exception e) {            return ResponseEntity.internalServerError()                    .body(new ApiResponse<>("Failed to retrieve booking: " + e.getMessage(), null, false));        }    }    // Get All Bookings    @PostMapping("/getAllMyBookings")    public ResponseEntity<Page<Bookings>> getAllBookings(@RequestBody BookingRequest request, HttpServletRequest httpServletRequest) {        try {            String token = httpServletRequest.getHeader("Authorization").replace("Bearer ", "");            Long userId = JwtUtil.getTelegramIdFromToken(token);            request.setUserTelegramIdId(userId);            request.setServiceProvider(JwtUtil.getUserIdByToken(token));            Pageable pageable = PageRequest.of(request.getPage(), request.getLimit());            Specification<Bookings> specification = BookingFilterSpecification.bookingFilter(request);            Page<Bookings> bookings = bookingService.getAllBookingsPage(pageable, specification);            return ResponseEntity.ok( bookings);        } catch (Exception e) {            throw new RuntimeException("Error in DashBoardOperationController.getAllBookings " + e.getMessage());        }    }    // Booking Approval method    @PutMapping("/bookingAcceptance")    public ResponseEntity<ApiResponse<Bookings>> bookingAcceptance(@RequestBody BookingRequest request) {        try {            Bookings updatedBooking = bookingService.bookingAcceptance(request);            return ResponseEntity.ok(new ApiResponse<>("Booking status updated successfully", updatedBooking, true));        } catch (Exception e) {            return ResponseEntity.internalServerError()                    .body(new ApiResponse<>("Failed to update booking status: " + e.getMessage(), null, false));        }    }}