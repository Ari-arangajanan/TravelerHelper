package com.MITProjectAdmin.Controller.management;import com.MITProjectService.bot.Services.ServiceProviderService;import com.MITProjectService.bot.Services.SnUserService;import com.MITProjectService.bot.dao.jpaRepos.specification.SnServiceProviderFilterSpecification;import com.MITProjectService.bot.dao.jpaRepos.specification.SnUserFilterSpecification;import com.MITProjectService.bot.domain.ServiceProvider;import com.MITProjectService.bot.domain.SnUser;import com.MITProjectService.bot.request.SnUserRequest;import com.MITProjectService.exceptionhandling.DataTransactionalException;import jakarta.servlet.http.HttpServletResponse;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.dao.DataAccessException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.Optional;@CrossOrigin(origins = "http://localhost:5174", allowCredentials = "true")@RestController@RequestMapping(path = "/admin/systemUser")public class SnUserController {    Logger logger = LoggerFactory.getLogger(SnUserController.class);    private final SnUserService snUserService;    private final ServiceProviderService serviceProviderService;    public SnUserController(SnUserService snUserService, ServiceProviderService serviceProviderService) {        this.snUserService = snUserService;        this.serviceProviderService = serviceProviderService;    }    @PostMapping(value = "/userList")    public ResponseEntity<?> userList(@Valid @RequestBody SnUserRequest userRequest, HttpServletResponse response) {        try {            Pageable pageable = PageRequest.of(userRequest.getPage(), userRequest.getLimit());            Specification<SnUser> filter = SnUserFilterSpecification.findAndFilter(userRequest);            Page<SnUser> allUser = snUserService.getAllUsers(filter, pageable);            return new ResponseEntity<>(allUser, HttpStatus.OK);        } catch (Exception e) {            throw new DataTransactionalException(e.getLocalizedMessage());        }    }    @PostMapping(value = "/serviceProviderList")    public ResponseEntity<?> getAllServiceProvider(@Valid @RequestBody SnUserRequest userRequest, HttpServletResponse response) {        try{        Pageable pageable = PageRequest.of(userRequest.getPage(), userRequest.getLimit());        Specification<ServiceProvider> filter = SnServiceProviderFilterSpecification.findAndFilter(userRequest);        Page<ServiceProvider> allUserServiceProvider = serviceProviderService.getAllServiceProvider(filter, pageable);        return new ResponseEntity<>(allUserServiceProvider, HttpStatus.OK);        } catch (Exception e) {            throw new DataTransactionalException(e.getLocalizedMessage());        }    }    @PostMapping(value = "/user")    public Optional<SnUser> getAUser(@Valid Long id) {        return snUserService.getUserByID(id);    }    @PostMapping(value = "/serviceProvider")    public Optional<ServiceProvider> getServiceProvider(@Valid Long id) {        return serviceProviderService.getUserByID(id);    }    @PostMapping(value = "/deleteUser")    public void deleteUser(@Valid Long id) {        snUserService.deleteUser(id);    }    @PostMapping(value = "/deleteServiceProvider")    public void deleteServiceProvider(@Valid Long id) {        serviceProviderService.deleteServiceProvider(id);    }    @PostMapping(value = "/updateUser")    public SnUser updateUser(@Valid SnUser request) {        return snUserService.updateUser(request);    }    @PostMapping(value = "/updateServiceProvider")    public ServiceProvider updateServiceProvider(@Valid ServiceProvider request) {        return serviceProviderService.updateServiceProvider(request);    }}