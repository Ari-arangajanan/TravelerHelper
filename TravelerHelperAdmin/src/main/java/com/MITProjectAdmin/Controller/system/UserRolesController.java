package com.MITProjectAdmin.Controller.system;import com.MITProjectService.admin.domain.system.UserRole;import com.MITProjectService.admin.request.UserRoleRequest;import com.MITProjectService.admin.service.UserRolesService;import com.MITProjectService.exceptionhandling.DataTransactionalException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@CrossOrigin(origins = "http://localhost:5174", allowCredentials = "true")@RestController@RequestMapping(path = "/admin/userRole/")public class UserRolesController {    @Autowired    public UserRolesService userRolesService;    @PostMapping(value = "/index")    public ResponseEntity<Page<?>> Index(UserRoleRequest userRoleRequest) {        Pageable pageable = PageRequest.of(userRoleRequest.getPage(), userRoleRequest.getLimit());        Page<UserRole> allUserRoles = userRolesService.getAllRoles(pageable);        return new ResponseEntity<>(allUserRoles, HttpStatus.OK);    }    @PostMapping(value = "/saverole")    public ResponseEntity<?> register(@RequestBody UserRole userRole) {        try {            userRolesService.saveRole(userRole);            return new ResponseEntity<>("success", HttpStatus.CREATED);        } catch (DataIntegrityViolationException e) {            if (e.getRootCause() != null && e.getRootCause().getMessage().contains("Duplicate entry")) {                throw new DataTransactionalException("The username already exists. Please choose a different username.");            } else throw new DataTransactionalException(e.getLocalizedMessage());        } catch (Exception e) {            throw new DataTransactionalException(e.getLocalizedMessage());        }    }    @PutMapping(value = "/updaterole")    public ResponseEntity<?> updateRole(@RequestBody UserRole userRole) {        try {            userRolesService.updateUserRole(userRole);            return new ResponseEntity<>("success", HttpStatus.NO_CONTENT);        } catch (DataIntegrityViolationException e) {            if (e.getRootCause() != null && e.getRootCause().getMessage().contains("Duplicate entry")) {                throw new DataTransactionalException("The username already exists. Please choose a different username.");            } else throw new DataTransactionalException(e.getLocalizedMessage());        } catch (Exception e) {            throw new DataTransactionalException(e.getLocalizedMessage());        }    }    @GetMapping(value = "/getArole")    public ResponseEntity<?> getRole(@RequestBody UserRole userRole) {        try {            userRolesService.getReferenceById(userRole.getId());            return new ResponseEntity<>("success", HttpStatus.OK);        } catch (Exception e) {            throw new DataTransactionalException(e.getLocalizedMessage());        }    }    @GetMapping(value = "/delete")    public ResponseEntity<?> delete(@RequestBody UserRole userRole) {        try {            userRolesService.delete(userRole.getId());            return new ResponseEntity<>("success", HttpStatus.NO_CONTENT);        } catch (Exception e) {            throw new DataTransactionalException(e.getLocalizedMessage());        }    }}