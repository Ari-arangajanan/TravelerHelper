package com.MITProjectAdmin.Controller.system;import com.MITProjectAdmin.configs.JwtHelper;import com.MITProjectAdmin.configs.JwtResponseDTO;import com.MITProjectAdmin.security.RefreshTokenService;import com.MITProjectService.admin.domain.system.RefreshToken;import com.MITProjectService.admin.domain.system.SysUser;import com.MITProjectService.admin.request.LoginRequest;import com.MITProjectService.admin.service.SysUserService;import com.MITProjectService.framework.redis.RedisCashService;import jakarta.servlet.http.Cookie;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseCookie;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.concurrent.TimeUnit;@CrossOrigin@RestController@RequestMapping(path = "/admin/systemUser")public class SystemUserController {    @Value("${admin.cookieExpiry}")    private long cookieExpiry;    Logger logger = LoggerFactory.getLogger(SystemUserController.class);    @Autowired    public SystemUserController(SysUserService systemUserService, AuthenticationManager authenticationManager, JwtHelper jwtHelper, PasswordEncoder passwordEncoder, RefreshTokenService refreshTokenService, RedisCashService redisCashService) {        this.systemUserService = systemUserService;        this.authenticationManager = authenticationManager;        this.jwtHelper = jwtHelper;        this.passwordEncoder = passwordEncoder;        this.refreshTokenService = refreshTokenService;        this.redisCashService = redisCashService;    }    private final SysUserService systemUserService;    private final AuthenticationManager authenticationManager;    private final JwtHelper jwtHelper;    private final PasswordEncoder passwordEncoder;    private final RefreshTokenService refreshTokenService;    private final RedisCashService redisCashService;    @PostMapping(value = "/login")    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest loginRequest, HttpServletResponse response) {        try {            Authentication authentication = authenticationManager.authenticate(                    new UsernamePasswordAuthenticationToken(loginRequest.getUserName(), loginRequest.getPassword())            );            if (authentication.isAuthenticated()) {                RefreshToken refreshToken = refreshTokenService.createRefreshToken(loginRequest.getUserName());                String token = jwtHelper.GenerateToken(loginRequest.getUserName());                refreshToken.setToken(token);                // Serialize refreshToken to Redis                String serializedRefreshToken = redisCashService.serializeRefreshToken(refreshToken);                boolean isTokenSaved = redisCashService.saveValInMin("RefreshToken:"+loginRequest.getUserName(), serializedRefreshToken, cookieExpiry);                if (!isTokenSaved) {                    throw new RuntimeException("Failed to store token");                }                ResponseCookie cookie = ResponseCookie.from("accessToken", loginRequest.getUserName()+":"+refreshToken.getAccessToken())                        .httpOnly(true)                        .secure(false)                        .path("/")                        .maxAge(cookieExpiry)                        .build();                response.addHeader(HttpHeaders.SET_COOKIE, cookie.toString());                JwtResponseDTO jwtResponse = JwtResponseDTO.builder()                        .accessToken(refreshToken.getAccessToken())                        .token(token)                        .userName(loginRequest.getUserName())                        .build();                return ResponseEntity.ok(jwtResponse);            } else return ResponseEntity.status(HttpStatus.NOT_FOUND).body("user not found");        } catch (BadCredentialsException e) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("bad credentials");        } catch (UsernameNotFoundException e) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("user not found");        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);        }    }    @PostMapping(value = "/logout")    public ResponseEntity<String> logout(HttpServletRequest request, HttpServletResponse response) {        for (Cookie cookie : request.getCookies()){            if (cookie.getName().equals("accessToken")){                String accessToken = cookie.getValue();                String[] splitTxt = accessToken.split(":");                boolean isRemoved = redisCashService.removeToken("RefreshToken:"+ splitTxt[0]);            }        }        SecurityContextHolder.clearContext();        // Remove cookies        Cookie[] cookies = request.getCookies();        if (cookies != null) {            for (Cookie cookie : cookies) {                cookie.setMaxAge(0);                cookie.setValue(null);                cookie.setPath("/");                response.addCookie(cookie);            }        }        return ResponseEntity.ok("logout");    }    @RequestMapping(value = "/index", method = RequestMethod.POST)    public String index() {        return "index";    }    @PostMapping(value = "/register")    public ResponseEntity<Void> register(@RequestBody SysUser sysUser) {        sysUser.setPassword(passwordEncoder.encode(sysUser.getPassword()));        systemUserService.addSysUser(sysUser);        return ResponseEntity.status(HttpStatus.CREATED).build();    }    @PutMapping(value = "/updateUser")    public ResponseEntity<SysUser> updateUser(@RequestBody SysUser sysUser, HttpSession httpSession) {        // todo implement the rest        return ResponseEntity.ok(sysUser);    }    @RequestMapping(value = "/list", method = RequestMethod.GET)    public String list() {        return "list";    }}