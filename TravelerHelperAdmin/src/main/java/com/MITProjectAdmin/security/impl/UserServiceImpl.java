package com.MITProjectAdmin.security.impl;import com.MITProjectAdmin.configs.MyUserDetails;import com.MITProjectAdmin.security.UserService;import com.MITProjectService.admin.dao.AuthoritiesRepo;import com.MITProjectService.admin.dao.SystemUserRepo;import com.MITProjectService.admin.domain.system.Authorities;import com.MITProjectService.admin.domain.system.SysUser;import io.jsonwebtoken.lang.Collections;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;@Servicepublic class UserServiceImpl implements UserDetailsService , UserService {    private final  SystemUserRepo systemUserRepo;    private final AuthoritiesRepo authoritiesRepo;    @Autowired    public UserServiceImpl(SystemUserRepo systemUserRepo, AuthoritiesRepo authoritiesRepo) {        this.systemUserRepo = systemUserRepo;        this.authoritiesRepo = authoritiesRepo;    }    // Spring Security login    private Collection<? extends GrantedAuthority> mapToRoleAuthority(Collection<Authorities> roles){        return roles.stream().map(role->new SimpleGrantedAuthority(role.getUserName())).collect(Collectors.toList());    }    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        SysUser sysUser = systemUserRepo.findByUserName(username);        if (sysUser == null) throw new UsernameNotFoundException("User not found with username: " + username);        return new MyUserDetails(sysUser);    }}