package com.MITProjectAdmin.security.impl;import com.MITProjectAdmin.security.AuthorizationService;import com.MITProjectAdmin.security.RefreshTokenService;import com.MITProjectService.admin.domain.system.RefreshToken;import com.MITProjectService.admin.request.LoginRequest;import com.MITProjectService.framework.redis.RedisCashService;import com.fasterxml.jackson.core.JsonProcessingException;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpHeaders;import org.springframework.http.ResponseCookie;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;@Servicepublic class AuthorizationServiceImpl implements AuthorizationService {    @Value("${admin.cookieExpiry}")    private int cookieExpiry;    private static final long MINUTES = 60;    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private RefreshTokenService refreshTokenService;    @Autowired    private RedisCashService redisCashService;    @Override    public Authentication authentication(LoginRequest loginRequest) {        return authenticationManager.authenticate(                new UsernamePasswordAuthenticationToken(loginRequest.getUserName(), loginRequest.getPassword()));    }    @Override    public void setRefreshTokenCookie(HttpServletResponse response, String userName, RefreshToken refreshToken) {        ResponseCookie cookie = ResponseCookie.from("refreshToken", userName + ":" + refreshToken.getRefreshToken())                .httpOnly(true)                .secure(false)                .path("/")                .maxAge(cookieExpiry)                .build();        response.addHeader(HttpHeaders.SET_COOKIE, cookie.toString());    }    @Override    public RefreshToken createAndSaveRefreshToken(LoginRequest loginRequest) throws JsonProcessingException {        RefreshToken refreshToken = refreshTokenService.createRefreshToken(loginRequest.getUserName());        // Serialize refreshToken to Redis        if (!loginRequest.isRememberMe()) cookieExpiry = 60;        String serializedRefreshToken = redisCashService.serializeRefreshToken(refreshToken);        boolean isTokenSaved = redisCashService.saveValInMin("RefreshToken:"+loginRequest.getUserName(), serializedRefreshToken, cookieExpiry);        if (!isTokenSaved) {            throw new RuntimeException("Failed to store accessToken");        }        return refreshToken;    }    @Override    public boolean saveAccessToken(String userName, String refreshToken, String accessToken) {        return redisCashService.saveValInMin("accessToken:"+userName+":",accessToken, MINUTES);    }}