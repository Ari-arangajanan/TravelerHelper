package com.MITProjectAdmin.configs;import com.MITProjectService.admin.domain.system.Authorities;import com.MITProjectService.admin.domain.system.SysUser;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.util.ArrayList;import java.util.Collection;import java.util.List;public class MyUserDetails implements UserDetails {    private final String username;    private final String password;    private final Collection<? extends GrantedAuthority> authorities;    // Add other fields you might need (e.g., accountNonExpired, accountNonLocked, etc.)    public MyUserDetails( SysUser user) {        this.username = user.getUsername();        this.password = user.getPassword(); // Assuming password is stored securely (hashed)        // Convert SysUser roles to GrantedAuthority objects        // Since the user now has a single role, handle it accordingly        Authorities role = user.getAuthorities();  // One-to-one relation        List<GrantedAuthority> auth = new ArrayList<>();        if(role != null){            auth.add(new SimpleGrantedAuthority(role.getRole().toUpperCase()));        }        this.authorities =  auth;        // Add logic to populate other fields based on SysUser data (if needed)    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return authorities;    }    @Override    public String getPassword() {        return password;    }    @Override    public String getUsername() {        return username;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }}