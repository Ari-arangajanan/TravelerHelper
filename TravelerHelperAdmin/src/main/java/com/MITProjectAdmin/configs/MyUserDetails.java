package com.MITProjectAdmin.configs;import com.MITProjectService.admin.domain.system.SysUser;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.util.Collection;public class MyUserDetails implements UserDetails {    private final String username;    private final String password;    private final Collection<? extends GrantedAuthority> authorities;    // Add other fields you might need (e.g., accountNonExpired, accountNonLocked, etc.)    public MyUserDetails( SysUser user, Collection<? extends GrantedAuthority> authorities) {        this.username = user.getUsername();        this.password = user.getPassword(); // Assuming password is stored securely (hashed)        // Convert SysUser roles to GrantedAuthority objects//        this.authorities = Collections.singletonList(new SimpleGrantedAuthority(user.getRole()));        this.authorities =  authorities;        // Add logic to populate other fields based on SysUser data (if needed)    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return authorities;    }    @Override    public String getPassword() {        return password;    }    @Override    public String getUsername() {        return username;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }}