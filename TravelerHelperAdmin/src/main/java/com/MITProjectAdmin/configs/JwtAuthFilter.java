package com.MITProjectAdmin.configs;import com.MITProjectAdmin.security.AuthorizationService;import com.MITProjectAdmin.security.RefreshTokenService;import com.MITProjectAdmin.security.impl.UserServiceImpl;import com.MITProjectService.admin.domain.system.RefreshToken;import com.MITProjectService.exceptionhandling.TokenRefreshException;import com.MITProjectService.framework.redis.RedisCashService;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.Cookie;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException;import java.time.Instant;import java.util.Date;@Componentpublic class JwtAuthFilter extends OncePerRequestFilter {    private static final long MINUTES = 60;    @Autowired    private JwtHelper jwtHelper;    @Autowired    private UserServiceImpl userServiceImpl;    @Autowired    private RefreshTokenService refreshTokenService;    @Autowired    private RedisCashService redisCashService;    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException, UsernameNotFoundException {        String authHeader = request.getHeader("Authorization");        String userName = null;        String token = null;        if (request.getCookies() != null) {            boolean refreshTokenValid = false;            for (Cookie cookie : request.getCookies()) {                if (cookie.getName().equals("refreshToken")) {                    String accessToken = cookie.getValue();                    String[] splitTxt = accessToken.split(":");                    RefreshToken cashedRefreshToken = redisCashService.getRefreshToken("RefreshToken:" + splitTxt[0]);                    if (cashedRefreshToken != null && cashedRefreshToken.getExpiryDate().isBefore(Instant.now())) {                        token = redisCashService.getAccessToken("accessToken:" + splitTxt[0] + ":");                        if (token == null || token.isEmpty()) {                            token = jwtHelper.GenerateToken(splitTxt[0]);                            redisCashService.saveValInMin("accessToken:" + splitTxt[0] + ":", token, MINUTES);                        }                    }                    if (token != null) userName = jwtHelper.getUserName(token);                    break;                }else {                    // Refresh token is invalid or expired, clear the cookie                    Cookie expiredCookie = new Cookie("refreshToken", null);                    expiredCookie.setHttpOnly(true);                    expiredCookie.setPath("/");                    expiredCookie.setMaxAge(0);                    response.addCookie(expiredCookie);                    // Return 403 response                    response.sendError(HttpServletResponse.SC_FORBIDDEN, "Refresh token expired. Please log in again.");                    return;                }            }        }        if (authHeader != null && authHeader.startsWith("token ")) {            token = authHeader.substring(6);            userName = jwtHelper.getUserName(token);        }        if (userName != null && SecurityContextHolder.getContext().getAuthentication() == null) {            UserDetails userDetails = userServiceImpl.loadUserByUsername(userName);            if (userDetails == null) throw new BadCredentialsException("userAccount not found");            if (jwtHelper.validateToken(token, userDetails)) {                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(                        userDetails, null, userDetails.getAuthorities()                );                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                SecurityContextHolder.getContext().setAuthentication(authenticationToken);            }        }        filterChain.doFilter(request, response);    }}