package com.MITProjectAdmin.configs;import com.MITProjectAdmin.security.RefreshTokenService;import com.MITProjectAdmin.security.impl.UserServiceImpl;import com.MITProjectService.admin.domain.system.RefreshToken;import com.MITProjectService.exceptionhandling.TokenRefreshException;import com.MITProjectService.framework.redis.RedisCashService;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.Cookie;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException;@Componentpublic class JwtAuthFilter extends OncePerRequestFilter {    @Autowired    private JwtHelper jwtHelper;    @Autowired    private UserServiceImpl userServiceImpl;    @Autowired    private RefreshTokenService refreshTokenService;    @Autowired    RedisCashService redisCashService;    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException, UsernameNotFoundException {        String authHeader = request.getHeader("Authorization");        String userName = null;        String token = null;        if (request.getCookies() !=null){            for (Cookie cookie : request.getCookies()){                if(cookie.getName().equals("refreshToken")){                    String accessToken = cookie.getValue();                    String[] splitTxt = accessToken.split(":");                    RefreshToken cashedRefreshToken = redisCashService.getRefreshToken("RefreshToken:"+ splitTxt[0]);                    token = redisCashService.getAccessToken("accessToken:"+accessToken+":");                    userName = jwtHelper.getUserName(token);                    if (userName.isEmpty()) throw new UsernameNotFoundException("User Not Found");                }            }        }        if (authHeader != null && authHeader.startsWith("token ")) {            token = authHeader.substring(6);            userName = jwtHelper.getUserName(token);        }        if (userName != null && SecurityContextHolder.getContext().getAuthentication() ==null){            UserDetails userDetails = userServiceImpl.loadUserByUsername(userName);            if (userDetails == null) throw new BadCredentialsException("userAccount not found");            if (jwtHelper.validateToken(token,userDetails)){                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(                        userDetails,null, userDetails.getAuthorities()                );                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                SecurityContextHolder.getContext().setAuthentication(authenticationToken);            }        }        filterChain.doFilter(request,response);    }}