package com.MITProjectAdmin.configs;import com.MITProjectAdmin.security.UserService;import com.MITProjectAdmin.security.impl.UserServiceImpl;import com.MITProjectService.admin.service.SysUserService;import lombok.AllArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.NoOpPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.provisioning.JdbcUserDetailsManager;import org.springframework.security.provisioning.UserDetailsManager;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.context.SecurityContextPersistenceFilter;import javax.sql.DataSource;@Configuration@EnableWebSecurity@EnableMethodSecurity@AllArgsConstructorpublic class SecurityConfig {    @Autowired    private  UserService userService;    @Autowired    private JwtAuthFilter jwtAuthFilter;    @Bean    public UserDetailsService userDetailsService(){        return new UserServiceImpl();    }//    @Bean//    public SecurityFilterChain filterChain(HttpSecurity httpSecurity,AuthenticationManager authenticationManager) throws Exception{//        httpSecurity.authorizeRequests(//                configure->configure//                        .requestMatchers(HttpMethod.POST,"/admin/systemUser/add").hasRole("ADMIN")//                        .requestMatchers(HttpMethod.GET,"/api/v1/hello/hello").hasAnyRole("ADMIN","EMPLOYEE")//                        .requestMatchers(HttpMethod.PUT,"/admin/systemUser/**").hasRole("ADMIN") //** for put url /admin/systemUser/{id}//                        .requestMatchers(HttpMethod.DELETE,"/admin/systemUser/add").hasRole("ADMIN")//                        .requestMatchers(HttpMethod.PUT,"/admin/systemUser/add").hasRole("ADMIN")//                        .requestMatchers(HttpMethod.POST,"/admin/systemUser/login").permitAll()//                        .requestMatchers(HttpMethod.POST,"/admin/systemUser/register").permitAll()//                        .anyRequest().authenticated()////        ).authenticationManager(authenticationManager).csrf(AbstractHttpConfigurer::disable);//        return httpSecurity.build();//    }    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception{        return httpSecurity.csrf(AbstractHttpConfigurer::disable)                .authorizeHttpRequests(auth-> auth                .requestMatchers(HttpMethod.POST,"/admin/systemUser/login").permitAll())                .authorizeHttpRequests(auth -> auth.requestMatchers("/admin/systemUser/**").authenticated())                .sessionManagement(session -> session                .sessionCreationPolicy(SessionCreationPolicy.STATELESS))                .authenticationProvider(authenticationProvider())                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)                .build();    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder(); // Using a strong password encoder    }//    @Bean//    public AuthenticationManager authenticationManager(HttpSecurity httpSecurity)throws Exception{//        AuthenticationManagerBuilder authenticationManagerBuilder = httpSecurity.getSharedObject(AuthenticationManagerBuilder.class);//        authenticationManagerBuilder.userDetailsService((UserDetailsService) userService).passwordEncoder(passwordEncoder());//        return authenticationManagerBuilder.build();//    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {        return config.getAuthenticationManager();    }    @Bean    public AuthenticationProvider authenticationProvider() {        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();        authenticationProvider.setUserDetailsService(userDetailsService());        authenticationProvider.setPasswordEncoder(passwordEncoder());        return authenticationProvider;    }}