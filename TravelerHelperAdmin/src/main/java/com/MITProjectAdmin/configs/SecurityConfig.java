package com.MITProjectAdmin.configs;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.config.Customizer;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import org.springframework.security.provisioning.JdbcUserDetailsManager;import org.springframework.security.provisioning.UserDetailsManager;import org.springframework.security.web.SecurityFilterChain;import javax.sql.DataSource;@Configuration//@EnableWebSecuritypublic class SecurityConfig {   @Bean   public UserDetailsManager userDetailsManager(DataSource dataSource){       JdbcUserDetailsManager jdbcUserDetailsManager = new JdbcUserDetailsManager(dataSource);       jdbcUserDetailsManager.setUsersByUsernameQuery("select username , password, status from system_user where username=?");       jdbcUserDetailsManager.setAuthoritiesByUsernameQuery("select user_name , role from authorities where user_name =?");       return jdbcUserDetailsManager;   }    @Bean    public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception{        httpSecurity.authorizeHttpRequests(                configure->configure                        .requestMatchers(HttpMethod.POST,"/admin/systemUser/add").hasRole("ADMIN")                        .requestMatchers(HttpMethod.GET,"/api/v1/hello/hello").hasAnyRole("ADMIN","EMPLOYEE")                        .requestMatchers(HttpMethod.PUT,"/admin/systemUser/**").hasRole("ADMIN") //** for put url /admin/systemUser/{id}                        .requestMatchers(HttpMethod.DELETE,"/admin/systemUser/add").hasRole("ADMIN")                        .requestMatchers(HttpMethod.PUT,"/admin/systemUser/add").hasRole("ADMIN")                        .anyRequest().authenticated()        ).formLogin(form->form.loginPage("/login").permitAll()        ).logout(LogoutConfigurer::permitAll)                .exceptionHandling(configurer-> configurer.accessDeniedPage("/accessDenayed"));        //BASIC http basic        httpSecurity.httpBasic(Customizer.withDefaults());        // disable CSRF        httpSecurity.csrf(AbstractHttpConfigurer::disable);        return httpSecurity.build();    }//    @Bean//    public InMemoryUserDetailsManager userDetailsManager(){//        UserDetails ari = User.builder()//                .username("ari")//                .password("{noop}test")//                .roles("EMPLOYEE","ADMIN")//                .build();////        UserDetails suthass = User.builder()//                .username("suthass")//                .password("{noop}test")//                .roles("EMPLOYEE","MANAGER")//                .build();////        UserDetails joe = User.builder()//                .username("joe")//                .password("{noop}test")//                .roles("EMPLOYEE","MANAGER", "ADMIN")//                .build();////        return new InMemoryUserDetailsManager(ari,suthass,joe);//    }}